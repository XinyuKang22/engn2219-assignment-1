<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>1</version>
  <attributes>
    <entry>
      <string>shapeType</string>
      <shapeType>LAYOUT</shapeType>
    </entry>
    <entry>
      <string>backgroundColor</string>
      <awt-color>
        <red>255</red>
        <green>255</green>
        <blue>255</blue>
        <alpha>255</alpha>
      </awt-color>
    </entry>
    <entry>
      <string>Label</string>
      <string>ALU</string>
    </entry>
    <entry>
      <string>Height</string>
      <int>15</int>
    </entry>
    <entry>
      <string>Width</string>
      <int>10</int>
    </entry>
    <entry>
      <string>showDataTable</string>
      <boolean>true</boolean>
    </entry>
  </attributes>
  <visualElements>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>RESULT</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>ALUOP A B RESULT

# Test small results
loop(a, 1 &lt;&lt; 4)
loop(b, 1 &lt;&lt; 4)
    (00) (a) (b) ((a + b) &amp; 0xFFFF)
    (01) (a) (b) ((a - b) &amp; 0xFFFF)
    (10) (a) (b) (a &amp; b)
    (11) (a) (b) (a | b)
end loop
end loop


# Test large results
loop(i, 1000)
    let a = random(1 &lt;&lt; 16);
    let b = random(1 &lt;&lt; 16);

    (00) (a) (b) ((a + b) &amp; 0xFFFF)
    (01) (a) (b) ((a - b) &amp; 0xFFFF)
    (10) (a) (b) (a &amp; b)
    (11) (a) (b) (a | b)
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="-660" y="-200"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>Z</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>ALUOP A B Z

declare Z = FLAG &amp; 0b1;

# Test all zero cases
00 0 0 1
01 0 0 1
10 0 0 1
11 0 0 1

# Test 1 + (-1) = 0
00 1 0xFFFF 1

# Test with a single bit set in A
loop(s, 16)
    let a = 1 &lt;&lt; s;

    00 (a) 0 (a = 0)
    01 (a) 0 (a = 0)
    10 (a) 0 1
    11 (a) 0 (a = 0)
end loop

# Test random inputs
loop(i, 200)
    let a = random(1 &lt;&lt; 16);
    let b = random(1 &lt;&lt; 16);

    00 (a) (b) (((a + b) &amp; 0xFFFF) = 0)
    01 (a) (b) (((a - b) &amp; 0xFFFF) = 0)
    10 (a) (b) ((a &amp; b) = 0)
    11 (a) (b) ((a | b) = 0)
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="-660" y="-100"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>N</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>ALUOP A B N

declare N = (FLAG &gt;&gt; 1) &amp; 0b1;

# Test all zero cases
00 0 0 0
01 0 0 0
10 0 0 0
11 0 0 0

00 1 0xFFFF 0

# Test with a single bit set in A
loop(s, 16)
    let a = 1 &lt;&lt; s;

    00 (a) 0 ((a &gt;&gt; 15) &amp; 0b1)
    01 (a) 0 ((a &gt;&gt; 15) &amp; 0b1)
    10 (a) 0 0
    11 (a) 0 ((a &gt;&gt; 15) &amp; 0b1)
end loop

# Test random inputs
loop(i, 200)
    let a = random(1 &lt;&lt; 16);
    let b = random(1 &lt;&lt; 16);

    00 (a) (b) (((a + b) &gt;&gt; 15) &amp; 0b1)
    01 (a) (b) (((a - b) &gt;&gt; 15) &amp; 0b1)
    10 (a) (b) (((a &amp; b) &gt;&gt; 15) &amp; 0b1)
    11 (a) (b) (((a | b) &gt;&gt; 15) &amp; 0b1)
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="-660" y="0"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>C</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>ALUOP A B C

declare C = (FLAG &gt;&gt; 2) &amp; 0b1;

00 0 0 0

# (0 - 0) is implemented as 0 + (0xFFFF + 1), so a carry is expected
01 0 0 1

# Carry should propagate all the way from the first bit if necessary
00 1 0xFFFF 1

# Test with a single bit set in A
loop(s, 16)
    let a = 1 &lt;&lt; s;

    00 (a) 0 0
    01 (a) 0 1  # (a - 0) is implemented as (a + 0xFFFF + 1) in the adder, so a carry is always expected
    10 (a) 0 0  # carry is defined as 0 for AND
    11 (a) 0 0  # carry is defined as 0 for OR
end loop

# Adding 15 bit values should never carry
loop(i, 100)
    00 (random(1 &lt;&lt; 15)) (random(1 &lt;&lt; 15)) 0
end loop

# Test random inputs
loop(i, 200)
    let a = random(1 &lt;&lt; 16);
    let b = random(1 &lt;&lt; 16);

    00 (a) (b) (((a + b) &gt;&gt; 16) &amp; 0b1)
    01 (a) (b) (~((a - b) &gt;&gt; 16) &amp; 0b1)
end loop

# AND and OR never set carry
loop(i, 100)
    let a = random(1 &lt;&lt; 16);
    let b = random(1 &lt;&lt; 16);
    10 (a) (b) 0
    11 (a) (b) 0
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="-660" y="100"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>V</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>ALUOP A B V

declare V = (FLAG &gt;&gt; 3) &amp; 0b1;

00 0 0 0
01 0 0 0

# 1 + (-1) = 0  ; different input signs = no overflow here!
00 1 0xFFFF 0

# 3 - 5 = 3 + (-5) = -2  ; subtraction inverts the second operand sign
01 3 5 0

# Some edge cases when subtracting 0x8000
01 0x8000 0x8000 0
01 0xFFFF 0x8000 0
01 0x7FFF 0x8000 1

# Test with a single bit set in A
loop(s, 16)
    let a = 1 &lt;&lt; s;

    00 (a) 0 0
    01 (a) 0 0
    10 (a) 0 0  # overflow is defined as 0 for AND
    11 (a) 0 0  # overflow is defined as 0 for OR
end loop

# Test random inputs
loop(i, 200)
    let a = random(1 &lt;&lt; 16);
    let b = random(1 &lt;&lt; 16);

    00 (a) (b) (((~(a ^ b) &amp; (a ^ (a + b))) &gt;&gt; 15) &amp; 0b1)
    01 (a) (b) (((~(a ^ -b) &amp; (a ^ (a - b))) &gt;&gt; 15) &amp; 0b1)
end loop

# AND and OR never set overflow
loop(i, 100)
    let a = random(1 &lt;&lt; 16);
    let b = random(1 &lt;&lt; 16);
    10 (a) (b) 0
    11 (a) (b) 0
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="-660" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>First input to ALU</string>
        </entry>
        <entry>
          <string>Label</string>
          <string>A</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>16</int>
        </entry>
      </elementAttributes>
      <pos x="-480" y="-140"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Second input to ALU</string>
        </entry>
        <entry>
          <string>Label</string>
          <string>B</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>16</int>
        </entry>
      </elementAttributes>
      <pos x="-480" y="-80"/>
    </visualElement>
    <visualElement>
      <elementName>Add</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>16</int>
        </entry>
      </elementAttributes>
      <pos x="-220" y="-40"/>
    </visualElement>
    <visualElement>
      <elementName>Sub</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>16</int>
        </entry>
      </elementAttributes>
      <pos x="-120" y="-40"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
      </elementAttributes>
      <pos x="-160" y="-60"/>
    </visualElement>
    <visualElement>
      <elementName>And</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>16</int>
        </entry>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="-20" y="-40"/>
    </visualElement>
    <visualElement>
      <elementName>Or</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>16</int>
        </entry>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="80" y="-40"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
      </elementAttributes>
      <pos x="-260" y="-60"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>The result of this ALU operation</string>
        </entry>
        <entry>
          <string>Label</string>
          <string>RESULT</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>16</int>
        </entry>
      </elementAttributes>
      <pos x="220" y="120"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Selector Bits</string>
          <int>2</int>
        </entry>
        <entry>
          <string>Bits</string>
          <int>16</int>
        </entry>
      </elementAttributes>
      <pos x="120" y="80"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Operation selection input</string>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Label</string>
          <string>ALUOP</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>2</int>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>bin</intFormat>
        </entry>
      </elementAttributes>
      <pos x="180" y="-140"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>splitterSpreading</string>
          <int>2</int>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>16</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1</string>
        </entry>
      </elementAttributes>
      <pos x="200" y="860"/>
    </visualElement>
    <visualElement>
      <elementName>NOr</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation reference="../../../../visualElement[17]/elementAttributes/entry[2]/rotation"/>
        </entry>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>Inputs</string>
          <int>16</int>
        </entry>
      </elementAttributes>
      <pos x="60" y="720"/>
    </visualElement>
    <visualElement>
      <elementName>Not</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
      </elementAttributes>
      <pos x="-140" y="100"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Selector Bits</string>
          <int>2</int>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>flipSelPos</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="-120" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>The flags associated with the result of this ALU operation

0. Z (zero)
1. N (negative)
2. C (carry)
3. V (overflow)</string>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Label</string>
          <string>FLAG</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>4</int>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>bin</intFormat>
        </entry>
      </elementAttributes>
      <pos x="-100" y="740"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>1,1,1,1</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>4</string>
        </entry>
      </elementAttributes>
      <pos x="-100" y="640"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
      </elementAttributes>
      <pos x="-180" y="180"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
      </elementAttributes>
      <pos x="-160" y="180"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>16</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>15,1</string>
        </entry>
      </elementAttributes>
      <pos x="-420" y="100"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>16</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>15,1</string>
        </entry>
      </elementAttributes>
      <pos x="-340" y="100"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>16</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>15,1</string>
        </entry>
      </elementAttributes>
      <pos x="-380" y="100"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>16</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>15,1</string>
        </entry>
      </elementAttributes>
      <pos x="-300" y="100"/>
    </visualElement>
    <visualElement>
      <elementName>XOr</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="-360" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>XOr</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="-280" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>XOr</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="-440" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>Not</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
      </elementAttributes>
      <pos x="-460" y="280"/>
    </visualElement>
    <visualElement>
      <elementName>And</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="-400" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Not</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
      </elementAttributes>
      <pos x="-300" y="280"/>
    </visualElement>
    <visualElement>
      <elementName>And</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="-300" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Selector Bits</string>
          <int>2</int>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>flipSelPos</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="-300" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
      </elementAttributes>
      <pos x="-360" y="480"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
      </elementAttributes>
      <pos x="-340" y="480"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="60" y="640"/>
      <p2 x="140" y="640"/>
    </wire>
    <wire>
      <p1 x="-100" y="640"/>
      <p2 x="-40" y="640"/>
    </wire>
    <wire>
      <p1 x="60" y="580"/>
      <p2 x="180" y="580"/>
    </wire>
    <wire>
      <p1 x="-120" y="260"/>
      <p2 x="60" y="260"/>
    </wire>
    <wire>
      <p1 x="-460" y="260"/>
      <p2 x="-340" y="260"/>
    </wire>
    <wire>
      <p1 x="60" y="260"/>
      <p2 x="180" y="260"/>
    </wire>
    <wire>
      <p1 x="60" y="520"/>
      <p2 x="180" y="520"/>
    </wire>
    <wire>
      <p1 x="-300" y="520"/>
      <p2 x="-20" y="520"/>
    </wire>
    <wire>
      <p1 x="-480" y="-140"/>
      <p2 x="-420" y="-140"/>
    </wire>
    <wire>
      <p1 x="-120" y="-140"/>
      <p2 x="-20" y="-140"/>
    </wire>
    <wire>
      <p1 x="-220" y="-140"/>
      <p2 x="-120" y="-140"/>
    </wire>
    <wire>
      <p1 x="-420" y="-140"/>
      <p2 x="-220" y="-140"/>
    </wire>
    <wire>
      <p1 x="-20" y="-140"/>
      <p2 x="80" y="-140"/>
    </wire>
    <wire>
      <p1 x="60" y="140"/>
      <p2 x="120" y="140"/>
    </wire>
    <wire>
      <p1 x="-480" y="140"/>
      <p2 x="-360" y="140"/>
    </wire>
    <wire>
      <p1 x="-360" y="140"/>
      <p2 x="-280" y="140"/>
    </wire>
    <wire>
      <p1 x="100" y="780"/>
      <p2 x="180" y="780"/>
    </wire>
    <wire>
      <p1 x="60" y="460"/>
      <p2 x="120" y="460"/>
    </wire>
    <wire>
      <p1 x="160" y="460"/>
      <p2 x="180" y="460"/>
    </wire>
    <wire>
      <p1 x="-420" y="460"/>
      <p2 x="-300" y="460"/>
    </wire>
    <wire>
      <p1 x="-480" y="-80"/>
      <p2 x="-340" y="-80"/>
    </wire>
    <wire>
      <p1 x="-140" y="-80"/>
      <p2 x="-60" y="-80"/>
    </wire>
    <wire>
      <p1 x="-240" y="-80"/>
      <p2 x="-140" y="-80"/>
    </wire>
    <wire>
      <p1 x="-340" y="-80"/>
      <p2 x="-240" y="-80"/>
    </wire>
    <wire>
      <p1 x="-60" y="-80"/>
      <p2 x="40" y="-80"/>
    </wire>
    <wire>
      <p1 x="-380" y="80"/>
      <p2 x="-220" y="80"/>
    </wire>
    <wire>
      <p1 x="-220" y="80"/>
      <p2 x="120" y="80"/>
    </wire>
    <wire>
      <p1 x="100" y="340"/>
      <p2 x="180" y="340"/>
    </wire>
    <wire>
      <p1 x="-400" y="340"/>
      <p2 x="-380" y="340"/>
    </wire>
    <wire>
      <p1 x="-460" y="340"/>
      <p2 x="-440" y="340"/>
    </wire>
    <wire>
      <p1 x="60" y="660"/>
      <p2 x="120" y="660"/>
    </wire>
    <wire>
      <p1 x="160" y="660"/>
      <p2 x="180" y="660"/>
    </wire>
    <wire>
      <p1 x="60" y="600"/>
      <p2 x="180" y="600"/>
    </wire>
    <wire>
      <p1 x="-120" y="220"/>
      <p2 x="-20" y="220"/>
    </wire>
    <wire>
      <p1 x="-20" y="220"/>
      <p2 x="180" y="220"/>
    </wire>
    <wire>
      <p1 x="60" y="540"/>
      <p2 x="180" y="540"/>
    </wire>
    <wire>
      <p1 x="-160" y="540"/>
      <p2 x="-140" y="540"/>
    </wire>
    <wire>
      <p1 x="60" y="860"/>
      <p2 x="180" y="860"/>
    </wire>
    <wire>
      <p1 x="-240" y="160"/>
      <p2 x="-120" y="160"/>
    </wire>
    <wire>
      <p1 x="60" y="480"/>
      <p2 x="140" y="480"/>
    </wire>
    <wire>
      <p1 x="-80" y="100"/>
      <p2 x="120" y="100"/>
    </wire>
    <wire>
      <p1 x="60" y="420"/>
      <p2 x="80" y="420"/>
    </wire>
    <wire>
      <p1 x="140" y="420"/>
      <p2 x="180" y="420"/>
    </wire>
    <wire>
      <p1 x="120" y="740"/>
      <p2 x="180" y="740"/>
    </wire>
    <wire>
      <p1 x="60" y="680"/>
      <p2 x="100" y="680"/>
    </wire>
    <wire>
      <p1 x="60" y="620"/>
      <p2 x="160" y="620"/>
    </wire>
    <wire>
      <p1 x="80" y="300"/>
      <p2 x="180" y="300"/>
    </wire>
    <wire>
      <p1 x="-340" y="560"/>
      <p2 x="-160" y="560"/>
    </wire>
    <wire>
      <p1 x="60" y="500"/>
      <p2 x="160" y="500"/>
    </wire>
    <wire>
      <p1 x="80" y="820"/>
      <p2 x="180" y="820"/>
    </wire>
    <wire>
      <p1 x="-20" y="180"/>
      <p2 x="140" y="180"/>
    </wire>
    <wire>
      <p1 x="60" y="440"/>
      <p2 x="100" y="440"/>
    </wire>
    <wire>
      <p1 x="-40" y="120"/>
      <p2 x="120" y="120"/>
    </wire>
    <wire>
      <p1 x="160" y="120"/>
      <p2 x="200" y="120"/>
    </wire>
    <wire>
      <p1 x="200" y="120"/>
      <p2 x="220" y="120"/>
    </wire>
    <wire>
      <p1 x="120" y="380"/>
      <p2 x="180" y="380"/>
    </wire>
    <wire>
      <p1 x="60" y="700"/>
      <p2 x="80" y="700"/>
    </wire>
    <wire>
      <p1 x="140" y="700"/>
      <p2 x="180" y="700"/>
    </wire>
    <wire>
      <p1 x="-300" y="60"/>
      <p2 x="-120" y="60"/>
    </wire>
    <wire>
      <p1 x="-120" y="60"/>
      <p2 x="-80" y="60"/>
    </wire>
    <wire>
      <p1 x="-260" y="-60"/>
      <p2 x="-260" y="-40"/>
    </wire>
    <wire>
      <p1 x="200" y="120"/>
      <p2 x="200" y="860"/>
    </wire>
    <wire>
      <p1 x="-140" y="-80"/>
      <p2 x="-140" y="-40"/>
    </wire>
    <wire>
      <p1 x="-140" y="20"/>
      <p2 x="-140" y="100"/>
    </wire>
    <wire>
      <p1 x="-140" y="140"/>
      <p2 x="-140" y="200"/>
    </wire>
    <wire>
      <p1 x="-140" y="540"/>
      <p2 x="-140" y="640"/>
    </wire>
    <wire>
      <p1 x="-460" y="240"/>
      <p2 x="-460" y="260"/>
    </wire>
    <wire>
      <p1 x="-460" y="320"/>
      <p2 x="-460" y="340"/>
    </wire>
    <wire>
      <p1 x="-460" y="260"/>
      <p2 x="-460" y="280"/>
    </wire>
    <wire>
      <p1 x="140" y="420"/>
      <p2 x="140" y="480"/>
    </wire>
    <wire>
      <p1 x="140" y="640"/>
      <p2 x="140" y="700"/>
    </wire>
    <wire>
      <p1 x="140" y="160"/>
      <p2 x="140" y="180"/>
    </wire>
    <wire>
      <p1 x="-80" y="60"/>
      <p2 x="-80" y="100"/>
    </wire>
    <wire>
      <p1 x="-400" y="120"/>
      <p2 x="-400" y="160"/>
    </wire>
    <wire>
      <p1 x="-400" y="340"/>
      <p2 x="-400" y="360"/>
    </wire>
    <wire>
      <p1 x="80" y="300"/>
      <p2 x="80" y="420"/>
    </wire>
    <wire>
      <p1 x="80" y="700"/>
      <p2 x="80" y="820"/>
    </wire>
    <wire>
      <p1 x="80" y="-140"/>
      <p2 x="80" y="-40"/>
    </wire>
    <wire>
      <p1 x="-340" y="480"/>
      <p2 x="-340" y="500"/>
    </wire>
    <wire>
      <p1 x="-340" y="-80"/>
      <p2 x="-340" y="100"/>
    </wire>
    <wire>
      <p1 x="-340" y="260"/>
      <p2 x="-340" y="360"/>
    </wire>
    <wire>
      <p1 x="-340" y="540"/>
      <p2 x="-340" y="560"/>
    </wire>
    <wire>
      <p1 x="-20" y="-140"/>
      <p2 x="-20" y="-40"/>
    </wire>
    <wire>
      <p1 x="-20" y="180"/>
      <p2 x="-20" y="220"/>
    </wire>
    <wire>
      <p1 x="-20" y="220"/>
      <p2 x="-20" y="520"/>
    </wire>
    <wire>
      <p1 x="-280" y="140"/>
      <p2 x="-280" y="160"/>
    </wire>
    <wire>
      <p1 x="-220" y="-140"/>
      <p2 x="-220" y="-40"/>
    </wire>
    <wire>
      <p1 x="-220" y="20"/>
      <p2 x="-220" y="80"/>
    </wire>
    <wire>
      <p1 x="-160" y="-60"/>
      <p2 x="-160" y="-40"/>
    </wire>
    <wire>
      <p1 x="-160" y="180"/>
      <p2 x="-160" y="200"/>
    </wire>
    <wire>
      <p1 x="-160" y="240"/>
      <p2 x="-160" y="540"/>
    </wire>
    <wire>
      <p1 x="-160" y="560"/>
      <p2 x="-160" y="640"/>
    </wire>
    <wire>
      <p1 x="-480" y="140"/>
      <p2 x="-480" y="160"/>
    </wire>
    <wire>
      <p1 x="160" y="460"/>
      <p2 x="160" y="500"/>
    </wire>
    <wire>
      <p1 x="160" y="620"/>
      <p2 x="160" y="660"/>
    </wire>
    <wire>
      <p1 x="-420" y="-140"/>
      <p2 x="-420" y="100"/>
    </wire>
    <wire>
      <p1 x="-420" y="440"/>
      <p2 x="-420" y="460"/>
    </wire>
    <wire>
      <p1 x="-100" y="660"/>
      <p2 x="-100" y="740"/>
    </wire>
    <wire>
      <p1 x="100" y="340"/>
      <p2 x="100" y="440"/>
    </wire>
    <wire>
      <p1 x="100" y="680"/>
      <p2 x="100" y="780"/>
    </wire>
    <wire>
      <p1 x="-40" y="40"/>
      <p2 x="-40" y="120"/>
    </wire>
    <wire>
      <p1 x="-40" y="560"/>
      <p2 x="-40" y="640"/>
    </wire>
    <wire>
      <p1 x="-360" y="120"/>
      <p2 x="-360" y="140"/>
    </wire>
    <wire>
      <p1 x="-360" y="480"/>
      <p2 x="-360" y="500"/>
    </wire>
    <wire>
      <p1 x="-360" y="140"/>
      <p2 x="-360" y="160"/>
    </wire>
    <wire>
      <p1 x="40" y="-80"/>
      <p2 x="40" y="-40"/>
    </wire>
    <wire>
      <p1 x="-300" y="60"/>
      <p2 x="-300" y="100"/>
    </wire>
    <wire>
      <p1 x="-300" y="240"/>
      <p2 x="-300" y="280"/>
    </wire>
    <wire>
      <p1 x="-300" y="320"/>
      <p2 x="-300" y="360"/>
    </wire>
    <wire>
      <p1 x="-300" y="460"/>
      <p2 x="-300" y="500"/>
    </wire>
    <wire>
      <p1 x="-240" y="-80"/>
      <p2 x="-240" y="-40"/>
    </wire>
    <wire>
      <p1 x="-240" y="20"/>
      <p2 x="-240" y="160"/>
    </wire>
    <wire>
      <p1 x="-180" y="180"/>
      <p2 x="-180" y="200"/>
    </wire>
    <wire>
      <p1 x="180" y="500"/>
      <p2 x="180" y="520"/>
    </wire>
    <wire>
      <p1 x="180" y="600"/>
      <p2 x="180" y="620"/>
    </wire>
    <wire>
      <p1 x="180" y="-140"/>
      <p2 x="180" y="220"/>
    </wire>
    <wire>
      <p1 x="-120" y="-140"/>
      <p2 x="-120" y="-40"/>
    </wire>
    <wire>
      <p1 x="-120" y="20"/>
      <p2 x="-120" y="60"/>
    </wire>
    <wire>
      <p1 x="-120" y="160"/>
      <p2 x="-120" y="200"/>
    </wire>
    <wire>
      <p1 x="-120" y="260"/>
      <p2 x="-120" y="640"/>
    </wire>
    <wire>
      <p1 x="-440" y="120"/>
      <p2 x="-440" y="160"/>
    </wire>
    <wire>
      <p1 x="-440" y="340"/>
      <p2 x="-440" y="360"/>
    </wire>
    <wire>
      <p1 x="120" y="380"/>
      <p2 x="120" y="460"/>
    </wire>
    <wire>
      <p1 x="120" y="660"/>
      <p2 x="120" y="740"/>
    </wire>
    <wire>
      <p1 x="-380" y="80"/>
      <p2 x="-380" y="100"/>
    </wire>
    <wire>
      <p1 x="-380" y="240"/>
      <p2 x="-380" y="340"/>
    </wire>
    <wire>
      <p1 x="-60" y="-80"/>
      <p2 x="-60" y="-40"/>
    </wire>
    <wire>
      <p1 x="60" y="260"/>
      <p2 x="60" y="400"/>
    </wire>
    <wire>
      <p1 x="60" y="720"/>
      <p2 x="60" y="860"/>
    </wire>
    <wire>
      <p1 x="60" y="40"/>
      <p2 x="60" y="140"/>
    </wire>
    <wire>
      <p1 x="-320" y="120"/>
      <p2 x="-320" y="160"/>
    </wire>
    <wire>
      <p1 x="-320" y="440"/>
      <p2 x="-320" y="500"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>