<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>1</version>
  <attributes>
    <entry>
      <string>backgroundColor</string>
      <awt-color>
        <red>255</red>
        <green>255</green>
        <blue>255</blue>
        <alpha>255</alpha>
      </awt-color>
    </entry>
    <entry>
      <string>Width</string>
      <int>6</int>
    </entry>
  </attributes>
  <visualElements>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>INST</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>16</int>
        </entry>
      </elementAttributes>
      <pos x="-300" y="40"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>DMUX</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>2</int>
        </entry>
      </elementAttributes>
      <pos x="500" y="920"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>ALUOP</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>2</int>
        </entry>
      </elementAttributes>
      <pos x="500" y="660"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>RS1</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>3</int>
        </entry>
      </elementAttributes>
      <pos x="500" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>RS2</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>3</int>
        </entry>
      </elementAttributes>
      <pos x="500" y="260"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>WS</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>3</int>
        </entry>
      </elementAttributes>
      <pos x="500" y="120"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>WE</string>
        </entry>
      </elementAttributes>
      <pos x="500" y="560"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>EXEC</string>
        </entry>
      </elementAttributes>
      <pos x="500" y="20"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>splitterSpreading</string>
          <int>4</int>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>16</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>11-11,10-8,6-4,2-0,15-12</string>
        </entry>
      </elementAttributes>
      <pos x="-260" y="40"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>textFontSize</string>
          <int>20</int>
        </entry>
        <entry>
          <string>Description</string>
          <string>opcode</string>
        </entry>
      </elementAttributes>
      <pos x="-220" y="320"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>textFontSize</string>
          <int>20</int>
        </entry>
        <entry>
          <string>Description</string>
          <string>z</string>
        </entry>
      </elementAttributes>
      <pos x="-200" y="20"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>All Tests</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>	INST                                    WE  ALUOP  RS1   RS2  WS  STR  LDR DMUX

let aluop  = 0b1000;
let ldrop  = 0b0101;
let strop  = 0b0100;
let movlop = 0b0000;
let sethop = 0b0001;
let stiop = 0b0010;
let ldiop = 0b0011;

loop(rd, 1&lt;&lt;3)
loop(ra, 1&lt;&lt;3)
loop(rb, 1&lt;&lt;3)

loop(i, 4)
	((aluop+i)&lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 1  (i)     (ra)  (rb) (rd)  0   0    0  #test add/sub/and/orr
end loop

	(ldrop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        1  X       (ra)   X   (rd)  0   1    1  #test ldr
	(strop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0  X       (ra)  (rd)  X    1   0    3  #test str
	
	let imm = random(256);
	(movlop   &lt;&lt;12 | rd&lt;&lt;8 | imm )          1  X       X      X   (rd)  0   0    2  #test movl
	(sethop   &lt;&lt;12 | rd&lt;&lt;8 | imm )          1  X       X      X   (rd)  0   0    3  #test seth
	(stiop    &lt;&lt;12 | rd&lt;&lt;8 | imm )          0  X       X     (rd)  X    1   0    3  #test sti
	(ldiop    &lt;&lt;12 | rd&lt;&lt;8 | imm )          1  X       X      X   (rd)  0   1    1  #test sti
end loop
end loop
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="620" y="-120"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>SETH</string>
        </entry>
      </elementAttributes>
      <pos x="500" y="840"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>ALUOP</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>	INST                                    ALUOP 

let aluop  = 0b1000;
let ldrop  = 0b0101;
let strop  = 0b0100;
let movlop = 0b0000;

loop(rd, 1&lt;&lt;3)
loop(ra, 1&lt;&lt;3)
loop(rb, 1&lt;&lt;3)

loop(i, 4)
	((aluop+i)&lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) (i)    #test add/sub/and/orr
end loop

end loop
end loop
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="620" y="640"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>RS1</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>	INST                                    RS1  

let aluop  = 0b1000;
let ldrop  = 0b0101;
let strop  = 0b0100;
let movlop = 0b0000;

loop(rd, 1&lt;&lt;3)
loop(ra, 1&lt;&lt;3)
loop(rb, 1&lt;&lt;3)

loop(i, 4)
	((aluop+i)&lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) (ra)  #test add/sub/and/orr
end loop

	(ldrop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        (ra)  #test ldr
	(strop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        (ra)  #test str

end loop
end loop
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="620" y="180"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>RS2</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>	INST                                    RS2  

let aluop  = 0b1000;
let ldrop  = 0b0101;
let strop  = 0b0100;
let movlop = 0b0000;
let sethop = 0b0001;
let stiop = 0b0010;
let ldiop = 0b0011;

loop(rd, 1&lt;&lt;3)
loop(ra, 1&lt;&lt;3)
loop(rb, 1&lt;&lt;3)

loop(i, 4)
	((aluop+i)&lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) (rb) #test add/sub/and/orr
end loop
	(ldrop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        (rd) #test ldr
	(strop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        (rd) #test str
	let imm = random(1&lt;&lt;8);
	(movlop   &lt;&lt;12 | rd&lt;&lt;8 |imm)		(rd) #test movl
	(sethop   &lt;&lt;12 | rd&lt;&lt;8 |imm)		(rd) #test seth
	(stiop    &lt;&lt;12 | rd&lt;&lt;8 |imm)		(rd) #test sti
	(ldiop    &lt;&lt;12 | rd&lt;&lt;8 |imm)		(rd) #test ldi
end loop
end loop
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="620" y="260"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>STR</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>Z	INST                                    STR 

let aluop  = 0b1000;
let ldrop  = 0b0101;
let strop  = 0b0100;
let movlop = 0b0000;
let sethop = 0b0001;
let stiop = 0b0010;
let ldiop = 0b0011;

loop(rd, 1&lt;&lt;3)
loop(ra, 1&lt;&lt;3)
loop(rb, 1&lt;&lt;3)

loop(i, 4)
	(0)((aluop+i)&lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 0    #test add/sub/and/orr
	(1)((aluop+i)&lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 0    #test add/sub/and/orr
        (0)((aluop+i)&lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 0    #test add/sub/and/orr
        (1)((aluop+i)&lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 0    #test add/sub/and/orr
end loop

	(0)(ldrop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test ldr
	(1)(ldrop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test ldr
	(0)(ldrop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test ldr
	(1)(ldrop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test ldr
	(0)(strop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        1    #test str
	(1)(strop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        1    #test str
	(0)(strop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test str
	(1)(strop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        1    #test str
	let imm = random(256);
	(0)(movlop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test movl
	(1)(movlop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test movl
	(0)(movlop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test movl
	(1)(movlop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test movl
	(0)(sethop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test seth
	(1)(sethop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test seth
	(0)(sethop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test seth
	(1)(sethop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test seth
	(0)(stiop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          1    #test sti
	(1)(stiop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          1    #test sti
	(0)(stiop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test sti
	(1)(stiop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          1    #test sti
	(0)(ldiop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test ldi
	(1)(ldiop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test ldi
	(0)(ldiop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test ldi
	(1)(ldiop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test ldi
end loop
end loop
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="620" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>WE</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>Z	INST                                    WE 

let aluop  = 0b1000;
let ldrop  = 0b0101;
let strop  = 0b0100;
let movlop = 0b0000;
let sethop = 0b0001;
let stiop = 0b0010;
let ldiop = 0b0011;
let udop = 0b1111;

loop(rd, 1&lt;&lt;3)
loop(ra, 1&lt;&lt;3)
loop(rb, 1&lt;&lt;3)

loop(i, 4)
	(0)((aluop+i)&lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 1    #test add/sub/and/orr
	(1)((aluop+i)&lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 1    #test add/sub/and/orr
        (0)((aluop+i)&lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 0    #test add/sub/and/orr
        (1)((aluop+i)&lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 1    #test add/sub/and/orr
end loop

	(0)(ldrop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        1    #test ldr
	(1)(ldrop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        1    #test ldr
	(0)(ldrop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test ldr
	(1)(ldrop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        1    #test ldr
	(0)(strop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test str
	(1)(strop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test str
	(0)(strop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test str
	(1)(strop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test str
	let imm = random(256);
	(0)(movlop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          1    #test movl
	(1)(movlop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          1    #test movl
	(0)(movlop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test movl
	(1)(movlop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          1    #test movl
	(0)(sethop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          1    #test seth
	(1)(sethop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          1    #test seth
	(0)(sethop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test seth
	(1)(sethop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          1    #test seth
	(0)(stiop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test sti
	(1)(stiop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test sti
	(0)(stiop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test sti
	(1)(stiop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test sti
	(0)(ldiop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          1    #test ldi
	(1)(ldiop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          1    #test ldi
	(0)(ldiop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test ldi
	(1)(ldiop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          1    #test ldi
	(0)(udop     &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test undefined
	(1)(udop     &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test undefined
	(0)(udop     &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test undefined
	(1)(udop     &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test undefined
end loop
end loop
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="620" y="540"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>LDR</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>Z	INST                                    LDR 

let aluop  = 0b1000;
let ldrop  = 0b0101;
let strop  = 0b0100;
let movlop = 0b0000;
let sethop = 0b0001;
let stiop = 0b0010;
let ldiop = 0b0011;

loop(rd, 1&lt;&lt;3)
loop(ra, 1&lt;&lt;3)
loop(rb, 1&lt;&lt;3)

loop(i, 4)
	(0)((aluop+i)&lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 0    #test add/sub/and/orr
	(1)((aluop+i)&lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 0    #test add/sub/and/orr
        (0)((aluop+i)&lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 0    #test add/sub/and/orr
        (1)((aluop+i)&lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 0    #test add/sub/and/orr
end loop

	(0)(ldrop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        1    #test ldr
	(1)(ldrop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        1    #test ldr
	(0)(ldrop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test ldr
	(1)(ldrop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        1    #test ldr
	(0)(strop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test str
	(1)(strop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test str
	(0)(strop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test str
	(1)(strop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test str
	let imm = random(256);
	(0)(movlop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test movl
	(1)(movlop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test movl
	(0)(movlop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test movl
	(1)(movlop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test movl
	(0)(sethop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test seth
	(1)(sethop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test seth
	(0)(sethop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test seth
	(1)(sethop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test seth
	(0)(stiop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test sti
	(1)(stiop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test sti
	(0)(stiop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test sti
	(1)(stiop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test sti
	(0)(ldiop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          1    #test ldi
	(1)(ldiop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          1    #test ldi
	(0)(ldiop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test ldi
	(1)(ldiop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          1    #test ldi
end loop
end loop
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="620" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>DMUX</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>	INST                                    DMUX

let aluop  = 0b1000;
let ldrop  = 0b0101;
let strop  = 0b0100;
let movlop = 0b0000;
let sethop = 0b0001;
let stiop = 0b0010;
let ldiop = 0b0011;

loop(rd, 1&lt;&lt;3)
loop(ra, 1&lt;&lt;3)
loop(rb, 1&lt;&lt;3)

loop(i, 4)
	((aluop+i)&lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 0  #test add/sub/and/orr
end loop

	(ldrop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        1  #test ldr
	(strop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        3  #test str

	let imm = random(256);
	(movlop   &lt;&lt;12 | rd&lt;&lt;8 | imm )          2  #test movl
	(sethop   &lt;&lt;12 | rd&lt;&lt;8 | imm )          3  #test seth
	(ldiop    &lt;&lt;12 | rd&lt;&lt;8 | imm )          1  #test ldi
	(stiop    &lt;&lt;12 | rd&lt;&lt;8 | imm )          3  #test sti
end loop
end loop
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="620" y="900"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>WS</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>	INST                                    WS 

let aluop  = 0b1000;
let ldrop  = 0b0101;
let strop  = 0b0100;
let movlop = 0b0000;
let sethop = 0b0001;
let stiop = 0b0010;
let ldiop = 0b0011;

loop(rd, 1&lt;&lt;3)
loop(ra, 1&lt;&lt;3)
loop(rb, 1&lt;&lt;3)

loop(i, 4)
	((aluop+i)&lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) (rd)  #test add/sub/and/orr
end loop

	(ldrop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        (rd)   #test ldr
	(strop    &lt;&lt;12 | rd&lt;&lt;8 | ra&lt;&lt;4 )        X     #test str
	
	let imm = random(256);
	(movlop   &lt;&lt;12 | rd&lt;&lt;8 | imm )          (rd)  #test movl
	(sethop   &lt;&lt;12 | rd&lt;&lt;8 | imm )          (rd)  #test seth
	(stiop    &lt;&lt;12 | rd&lt;&lt;8 | imm )          (rd)  #test sti
	(ldiop    &lt;&lt;12 | rd&lt;&lt;8 | imm )          (rd)  #test ldi
end loop
end loop
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="620" y="100"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>textFontSize</string>
          <int>20</int>
        </entry>
        <entry>
          <string>Description</string>
          <string>Rb</string>
        </entry>
      </elementAttributes>
      <pos x="-200" y="260"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>textFontSize</string>
          <int>20</int>
        </entry>
        <entry>
          <string>Description</string>
          <string>Ra</string>
        </entry>
      </elementAttributes>
      <pos x="-200" y="180"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>textFontSize</string>
          <int>20</int>
        </entry>
        <entry>
          <string>Description</string>
          <string>Rd</string>
        </entry>
      </elementAttributes>
      <pos x="-200" y="100"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>3</int>
        </entry>
      </elementAttributes>
      <pos x="-20" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>FLEN</string>
        </entry>
      </elementAttributes>
      <pos x="500" y="740"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>FLEN</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>Z	INST                                    FLEN 

let aluop  = 0b1000;
let ldrop  = 0b0101;
let strop  = 0b0100;
let movlop = 0b0000;
let sethop = 0b0001;
let stiop = 0b0010;
let ldiop = 0b0011;
let udop = 0b1111;

loop(rd, 1&lt;&lt;3)
loop(ra, 1&lt;&lt;3)
loop(rb, 1&lt;&lt;3)

loop(i, 4)
	(0)((aluop+i)&lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 1    #test add/sub/and/orr
	(1)((aluop+i)&lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 1    #test add/sub/and/orr
        (0)((aluop+i)&lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 0    #test add/sub/and/orr
        (1)((aluop+i)&lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 1    #test add/sub/and/orr
end loop

	(0)(ldrop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test ldr
	(1)(ldrop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test ldr
	(0)(ldrop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test ldr
	(1)(ldrop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test ldr
	(0)(strop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test str
	(1)(strop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test str
	(0)(strop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test str
	(1)(strop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test str
	let imm = random(256);
	(0)(movlop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test movl
	(1)(movlop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test movl
	(0)(movlop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test movl
	(1)(movlop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test movl
	(0)(sethop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test seth
	(1)(sethop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test seth
	(0)(sethop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test seth
	(1)(sethop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test seth
	(0)(stiop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test sti
	(1)(stiop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test sti
	(0)(stiop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test sti
	(1)(stiop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test sti
	(0)(ldiop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test ldi
	(1)(ldiop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test ldi
	(0)(ldiop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test ldi
	(1)(ldiop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test ldi
	(0)(udop     &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test undefined
	(1)(udop     &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test undefined
	(0)(udop     &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test undefined
	(1)(udop     &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test undefined
end loop
end loop
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="620" y="720"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>STR</string>
        </entry>
      </elementAttributes>
      <pos x="500" y="460"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>EXEC</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>	Z    INST    EXEC
loop(i, 100)
    let x = random(1&lt;&lt;4);
    let y = random(1&lt;&lt;11);
    (1) (x&lt;&lt;12 | 0&lt;&lt;11 | y) (1)
    (0) (x&lt;&lt;12 | 0&lt;&lt;11 | y) (1)
    (1) (x&lt;&lt;12 | 1&lt;&lt;11 | y) (1)
    (0) (x&lt;&lt;12 | 1&lt;&lt;11 | y) (0)
end loop</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="620" y="-20"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>Z</string>
        </entry>
      </elementAttributes>
      <pos x="-300" y="0"/>
    </visualElement>
    <visualElement>
      <elementName>Not</elementName>
      <elementAttributes/>
      <pos x="-20" y="0"/>
    </visualElement>
    <visualElement>
      <elementName>And</elementName>
      <elementAttributes>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="360" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>And</elementName>
      <elementAttributes>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="360" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>And</elementName>
      <elementAttributes>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="360" y="540"/>
    </visualElement>
    <visualElement>
      <elementName>And</elementName>
      <elementAttributes>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="360" y="720"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>LDR</string>
        </entry>
      </elementAttributes>
      <pos x="500" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>SETH</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>Z	INST                                    SETH 

let aluop  = 0b1000;
let ldrop  = 0b0101;
let strop  = 0b0100;
let movlop = 0b0000;
let sethop = 0b0001;
let stiop = 0b0010;
let ldiop = 0b0011;
let udop = 0b1111;

loop(rd, 1&lt;&lt;3)
loop(ra, 1&lt;&lt;3)
loop(rb, 1&lt;&lt;3)

loop(i, 4)
	(0)((aluop+i)&lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 0    #test add/sub/and/orr
	(1)((aluop+i)&lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 0    #test add/sub/and/orr
        (0)((aluop+i)&lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 0    #test add/sub/and/orr
        (1)((aluop+i)&lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 0    #test add/sub/and/orr
end loop

	(0)(ldrop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test ldr
	(1)(ldrop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test ldr
	(0)(ldrop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test ldr
	(1)(ldrop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test ldr
	(0)(strop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test str
	(1)(strop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test str
	(0)(strop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test str
	(1)(strop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test str
	let imm = random(256);
	(0)(movlop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test movl
	(1)(movlop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test movl
	(0)(movlop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test movl
	(1)(movlop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test movl
	(0)(sethop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          1    #test seth
	(1)(sethop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          1    #test seth
	(0)(sethop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test seth
	(1)(sethop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          1    #test seth
	(0)(stiop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test sti
	(1)(stiop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test sti
	(0)(stiop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test sti
	(1)(stiop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test sti
	(0)(ldiop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test ldi
	(1)(ldiop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test ldi
	(0)(ldiop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test ldi
	(1)(ldiop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test ldi
	(0)(udop     &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test undefined
	(1)(udop     &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test undefined
	(0)(udop     &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test undefined
	(1)(udop     &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test undefined
end loop
end loop
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="620" y="800"/>
    </visualElement>
    <visualElement>
      <elementName>And</elementName>
      <elementAttributes>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="360" y="820"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>I-mem</string>
        </entry>
      </elementAttributes>
      <pos x="500" y="1080"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>I-mem</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>Z	INST                                    I-mem 

let aluop  = 0b1000;
let ldrop  = 0b0101;
let strop  = 0b0100;
let movlop = 0b0000;
let sethop = 0b0001;
let stiop = 0b0010;
let ldiop = 0b0011;

loop(rd, 1&lt;&lt;3)
loop(ra, 1&lt;&lt;3)
loop(rb, 1&lt;&lt;3)

loop(i, 4)
	(0)((aluop+i)&lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 0    #test add/sub/and/orr
	(1)((aluop+i)&lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 0    #test add/sub/and/orr
        (0)((aluop+i)&lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 0    #test add/sub/and/orr
        (1)((aluop+i)&lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 | rb&lt;&lt;0) 0    #test add/sub/and/orr
end loop

	(0)(ldrop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test ldr
	(1)(ldrop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test ldr
	(0)(ldrop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test ldr
	(1)(ldrop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test ldr
	(0)(strop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test str
	(1)(strop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test str
	(0)(strop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test str
	(1)(strop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | ra&lt;&lt;4 )        0    #test str
	let imm = random(256);
	(0)(movlop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test movl
	(1)(movlop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test movl
	(0)(movlop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test movl
	(1)(movlop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test movl
	(0)(sethop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test seth
	(1)(sethop   &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test seth
	(0)(sethop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test seth
	(1)(sethop   &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test seth
	(0)(stiop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          1    #test sti
	(1)(stiop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          1    #test sti
	(0)(stiop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test sti
	(1)(stiop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          1    #test sti
	(0)(ldiop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          1    #test ldi
	(1)(ldiop    &lt;&lt;12 | 0&lt;&lt;11 | rd&lt;&lt;8 | imm )          1    #test ldi
	(0)(ldiop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          0    #test ldi
	(1)(ldiop    &lt;&lt;12 | 1&lt;&lt;11 | rd&lt;&lt;8 | imm )          1    #test ldi
end loop
end loop
end loop
</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="620" y="1060"/>
    </visualElement>
    <visualElement>
      <elementName>And</elementName>
      <elementAttributes>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="360" y="1060"/>
    </visualElement>
    <visualElement>
      <elementName>Demultiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>flipSelPos</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>Selector Bits</string>
          <int>4</int>
        </entry>
      </elementAttributes>
      <pos x="-220" y="460"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes/>
      <pos x="-240" y="620"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>MOVL</string>
        </entry>
      </elementAttributes>
      <pos x="-140" y="460"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>SETH</string>
        </entry>
      </elementAttributes>
      <pos x="-140" y="480"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>STI</string>
        </entry>
      </elementAttributes>
      <pos x="-140" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>LDI</string>
        </entry>
      </elementAttributes>
      <pos x="-140" y="520"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>STR</string>
        </entry>
      </elementAttributes>
      <pos x="-140" y="540"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>LDR</string>
        </entry>
      </elementAttributes>
      <pos x="-140" y="560"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>SETH</string>
        </entry>
      </elementAttributes>
      <pos x="120" y="860"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>4</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>2,2</string>
        </entry>
      </elementAttributes>
      <pos x="-160" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>12-13</string>
        </entry>
      </elementAttributes>
      <pos x="-100" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>12-13</string>
        </entry>
      </elementAttributes>
      <pos x="120" y="660"/>
    </visualElement>
    <visualElement>
      <elementName>Or</elementName>
      <elementAttributes>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>Inputs</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="140" y="540"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>LDR</string>
        </entry>
      </elementAttributes>
      <pos x="120" y="600"/>
    </visualElement>
    <visualElement>
      <elementName>Or</elementName>
      <elementAttributes>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="140" y="460"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>STR</string>
        </entry>
      </elementAttributes>
      <pos x="120" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation reference="../../../../visualElement[57]/elementAttributes/entry/rotation"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>STI</string>
        </entry>
      </elementAttributes>
      <pos x="120" y="460"/>
    </visualElement>
    <visualElement>
      <elementName>Or</elementName>
      <elementAttributes>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="140" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>LDI</string>
        </entry>
      </elementAttributes>
      <pos x="120" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation reference="../../../../visualElement[60]/elementAttributes/entry/rotation"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>LDR</string>
        </entry>
      </elementAttributes>
      <pos x="120" y="400"/>
    </visualElement>
    <visualElement>
      <elementName>Or</elementName>
      <elementAttributes>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>Inputs</string>
          <int>4</int>
        </entry>
      </elementAttributes>
      <pos x="-140" y="600"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>ALU</string>
        </entry>
      </elementAttributes>
      <pos x="-40" y="640"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>ALU</string>
        </entry>
      </elementAttributes>
      <pos x="120" y="620"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>ALU</string>
        </entry>
      </elementAttributes>
      <pos x="120" y="760"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>1,1</string>
        </entry>
        <entry>
          <string>splitterSpreading</string>
          <int>4</int>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>2</string>
        </entry>
      </elementAttributes>
      <pos x="360" y="920"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>ALU</string>
        </entry>
      </elementAttributes>
      <pos x="120" y="940"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>MOVL</string>
        </entry>
      </elementAttributes>
      <pos x="120" y="900"/>
    </visualElement>
    <visualElement>
      <elementName>NOr</elementName>
      <elementAttributes>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="140" y="900"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>ALU</string>
        </entry>
      </elementAttributes>
      <pos x="120" y="1020"/>
    </visualElement>
    <visualElement>
      <elementName>NOr</elementName>
      <elementAttributes>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>Inputs</string>
          <int>3</int>
        </entry>
      </elementAttributes>
      <pos x="140" y="980"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>LDI</string>
        </entry>
      </elementAttributes>
      <pos x="120" y="980"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation reference="../../../../visualElement[72]/elementAttributes/entry/rotation"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>LDR</string>
        </entry>
      </elementAttributes>
      <pos x="120" y="1000"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>ALU</string>
        </entry>
      </elementAttributes>
      <pos x="0" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>SETH</string>
        </entry>
      </elementAttributes>
      <pos x="120" y="560"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation reference="../../../../visualElement[75]/elementAttributes/entry/rotation"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>LDI</string>
        </entry>
      </elementAttributes>
      <pos x="120" y="580"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>MOVL</string>
        </entry>
      </elementAttributes>
      <pos x="120" y="540"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>LDI</string>
        </entry>
      </elementAttributes>
      <pos x="120" y="1120"/>
    </visualElement>
    <visualElement>
      <elementName>Or</elementName>
      <elementAttributes>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="140" y="1080"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>STI</string>
        </entry>
      </elementAttributes>
      <pos x="120" y="1080"/>
    </visualElement>
    <visualElement>
      <elementName>NAnd</elementName>
      <elementAttributes>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="140" y="0"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="-300" y="0"/>
      <p2 x="-20" y="0"/>
    </wire>
    <wire>
      <p1 x="20" y="0"/>
      <p2 x="140" y="0"/>
    </wire>
    <wire>
      <p1 x="-180" y="640"/>
      <p2 x="-140" y="640"/>
    </wire>
    <wire>
      <p1 x="-60" y="640"/>
      <p2 x="-40" y="640"/>
    </wire>
    <wire>
      <p1 x="20" y="260"/>
      <p2 x="500" y="260"/>
    </wire>
    <wire>
      <p1 x="120" y="900"/>
      <p2 x="140" y="900"/>
    </wire>
    <wire>
      <p1 x="220" y="580"/>
      <p2 x="360" y="580"/>
    </wire>
    <wire>
      <p1 x="120" y="580"/>
      <p2 x="140" y="580"/>
    </wire>
    <wire>
      <p1 x="-240" y="200"/>
      <p2 x="500" y="200"/>
    </wire>
    <wire>
      <p1 x="440" y="840"/>
      <p2 x="500" y="840"/>
    </wire>
    <wire>
      <p1 x="-180" y="520"/>
      <p2 x="-140" y="520"/>
    </wire>
    <wire>
      <p1 x="440" y="460"/>
      <p2 x="500" y="460"/>
    </wire>
    <wire>
      <p1 x="120" y="460"/>
      <p2 x="140" y="460"/>
    </wire>
    <wire>
      <p1 x="-180" y="460"/>
      <p2 x="-140" y="460"/>
    </wire>
    <wire>
      <p1 x="220" y="1100"/>
      <p2 x="360" y="1100"/>
    </wire>
    <wire>
      <p1 x="280" y="720"/>
      <p2 x="360" y="720"/>
    </wire>
    <wire>
      <p1 x="120" y="400"/>
      <p2 x="140" y="400"/>
    </wire>
    <wire>
      <p1 x="120" y="660"/>
      <p2 x="500" y="660"/>
    </wire>
    <wire>
      <p1 x="-180" y="660"/>
      <p2 x="-140" y="660"/>
    </wire>
    <wire>
      <p1 x="240" y="20"/>
      <p2 x="280" y="20"/>
    </wire>
    <wire>
      <p1 x="280" y="20"/>
      <p2 x="500" y="20"/>
    </wire>
    <wire>
      <p1 x="120" y="980"/>
      <p2 x="140" y="980"/>
    </wire>
    <wire>
      <p1 x="280" y="340"/>
      <p2 x="360" y="340"/>
    </wire>
    <wire>
      <p1 x="-240" y="280"/>
      <p2 x="-20" y="280"/>
    </wire>
    <wire>
      <p1 x="380" y="920"/>
      <p2 x="500" y="920"/>
    </wire>
    <wire>
      <p1 x="240" y="920"/>
      <p2 x="360" y="920"/>
    </wire>
    <wire>
      <p1 x="120" y="600"/>
      <p2 x="140" y="600"/>
    </wire>
    <wire>
      <p1 x="-160" y="600"/>
      <p2 x="-140" y="600"/>
    </wire>
    <wire>
      <p1 x="120" y="860"/>
      <p2 x="360" y="860"/>
    </wire>
    <wire>
      <p1 x="280" y="540"/>
      <p2 x="360" y="540"/>
    </wire>
    <wire>
      <p1 x="120" y="540"/>
      <p2 x="140" y="540"/>
    </wire>
    <wire>
      <p1 x="-180" y="540"/>
      <p2 x="-140" y="540"/>
    </wire>
    <wire>
      <p1 x="-180" y="480"/>
      <p2 x="-140" y="480"/>
    </wire>
    <wire>
      <p1 x="220" y="480"/>
      <p2 x="360" y="480"/>
    </wire>
    <wire>
      <p1 x="120" y="1120"/>
      <p2 x="140" y="1120"/>
    </wire>
    <wire>
      <p1 x="280" y="1060"/>
      <p2 x="360" y="1060"/>
    </wire>
    <wire>
      <p1 x="440" y="740"/>
      <p2 x="500" y="740"/>
    </wire>
    <wire>
      <p1 x="-180" y="680"/>
      <p2 x="-140" y="680"/>
    </wire>
    <wire>
      <p1 x="-300" y="40"/>
      <p2 x="-260" y="40"/>
    </wire>
    <wire>
      <p1 x="-240" y="40"/>
      <p2 x="140" y="40"/>
    </wire>
    <wire>
      <p1 x="-240" y="360"/>
      <p2 x="-200" y="360"/>
    </wire>
    <wire>
      <p1 x="-140" y="360"/>
      <p2 x="-100" y="360"/>
    </wire>
    <wire>
      <p1 x="440" y="360"/>
      <p2 x="500" y="360"/>
    </wire>
    <wire>
      <p1 x="120" y="360"/>
      <p2 x="140" y="360"/>
    </wire>
    <wire>
      <p1 x="-200" y="360"/>
      <p2 x="-160" y="360"/>
    </wire>
    <wire>
      <p1 x="120" y="1000"/>
      <p2 x="140" y="1000"/>
    </wire>
    <wire>
      <p1 x="240" y="1000"/>
      <p2 x="360" y="1000"/>
    </wire>
    <wire>
      <p1 x="-240" y="620"/>
      <p2 x="-220" y="620"/>
    </wire>
    <wire>
      <p1 x="-180" y="620"/>
      <p2 x="-160" y="620"/>
    </wire>
    <wire>
      <p1 x="120" y="620"/>
      <p2 x="140" y="620"/>
    </wire>
    <wire>
      <p1 x="120" y="940"/>
      <p2 x="140" y="940"/>
    </wire>
    <wire>
      <p1 x="-180" y="560"/>
      <p2 x="-140" y="560"/>
    </wire>
    <wire>
      <p1 x="440" y="560"/>
      <p2 x="500" y="560"/>
    </wire>
    <wire>
      <p1 x="120" y="560"/>
      <p2 x="140" y="560"/>
    </wire>
    <wire>
      <p1 x="-100" y="240"/>
      <p2 x="-20" y="240"/>
    </wire>
    <wire>
      <p1 x="-180" y="500"/>
      <p2 x="-140" y="500"/>
    </wire>
    <wire>
      <p1 x="120" y="500"/>
      <p2 x="140" y="500"/>
    </wire>
    <wire>
      <p1 x="280" y="820"/>
      <p2 x="360" y="820"/>
    </wire>
    <wire>
      <p1 x="280" y="440"/>
      <p2 x="360" y="440"/>
    </wire>
    <wire>
      <p1 x="120" y="760"/>
      <p2 x="360" y="760"/>
    </wire>
    <wire>
      <p1 x="440" y="1080"/>
      <p2 x="500" y="1080"/>
    </wire>
    <wire>
      <p1 x="120" y="1080"/>
      <p2 x="140" y="1080"/>
    </wire>
    <wire>
      <p1 x="-240" y="120"/>
      <p2 x="-100" y="120"/>
    </wire>
    <wire>
      <p1 x="-100" y="120"/>
      <p2 x="500" y="120"/>
    </wire>
    <wire>
      <p1 x="120" y="1020"/>
      <p2 x="140" y="1020"/>
    </wire>
    <wire>
      <p1 x="220" y="380"/>
      <p2 x="360" y="380"/>
    </wire>
    <wire>
      <p1 x="0" y="280"/>
      <p2 x="0" y="300"/>
    </wire>
    <wire>
      <p1 x="-100" y="120"/>
      <p2 x="-100" y="240"/>
    </wire>
    <wire>
      <p1 x="-200" y="360"/>
      <p2 x="-200" y="460"/>
    </wire>
    <wire>
      <p1 x="280" y="20"/>
      <p2 x="280" y="340"/>
    </wire>
    <wire>
      <p1 x="280" y="540"/>
      <p2 x="280" y="720"/>
    </wire>
    <wire>
      <p1 x="280" y="820"/>
      <p2 x="280" y="1060"/>
    </wire>
    <wire>
      <p1 x="280" y="340"/>
      <p2 x="280" y="440"/>
    </wire>
    <wire>
      <p1 x="280" y="440"/>
      <p2 x="280" y="540"/>
    </wire>
    <wire>
      <p1 x="280" y="720"/>
      <p2 x="280" y="820"/>
    </wire>
    <wire>
      <p1 x="-140" y="620"/>
      <p2 x="-140" y="640"/>
    </wire>
    <wire>
      <p1 x="-160" y="600"/>
      <p2 x="-160" y="620"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>